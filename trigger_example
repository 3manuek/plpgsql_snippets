-- postgres=# CREATE TABLE sip_capture (i int PRIMARY KEY, date timestamp);
-- CREATE TABLE
-- postgres=# CREATE TABLE sip_capture_p2014_06_10_1000 (CHECK (date < '2014-06-10'::timestamp), PRIMARY KEY (i)) INHERITS (sip_capture);
-- CREATE TABLE

-- postgres=# CREATE TRIGGER ins_cap BEFORE INSERT ON sip_capture FOR EACH ROW EXECUTE PROCEDURE PROTOTYPE_sip_capture_part_trig_func();
-- CREATE TRIGGER

-- postgres=# INSERT INTO sip_capture VALUES (9, now());
-- INSERT 0 0
-- postgres=# INSERT INTO sip_capture VALUES (10, now());
-- INSERT 0 0
-- postgres=# INSERT INTO sip_capture VALUES (10, now() - '3 hours'::interval);
-- INSERT 0 0

-- postgres=# ALTER TABLE sip_capture ADD COLUMN b text;
-- ALTER TABLE
-- postgres=# INSERT INTO sip_capture VALUES (11, now());
-- INSERT 0 0
-- postgres=# INSERT INTO sip_capture VALUES (15, now());
-- INSERT 0 0

-- postgres=# select * from sip_capture_p2014_06_10_05;
--  i  |            date            | b
-- ----+----------------------------+---
--  8 | 2014-06-10 17:17:27.68331  |
--  9 | 2014-06-10 17:18:47.851731 |
-- 10 | 2014-06-10 17:18:50.771322 |
-- 11 | 2014-06-10 17:25:21.795731 |
-- 15 | 2014-06-10 17:25:25.595749 |
-- (5 rows)


CREATE OR REPLACE FUNCTION PROTOTYPE_sip_capture_part_trig_func() RETURNS TRIGGER VOLATILE AS
$BODY$
BEGIN
   BEGIN      
      EXECUTE 'INSERT INTO sip_capture_p' || to_char(NEW.date, 'YYYY_MM_DD_HH') || 
      ' SELECT ((' || quote_literal(NEW) || ')::sip_capture).*';   
    EXCEPTION WHEN undefined_table THEN
      EXECUTE 'CREATE TABLE sip_capture_p' || to_char(NEW.date, 'YYYY_MM_DD_HH') || 
      '(CHECK ( date between ' || quote_literal(date_trunc('hour', NEW.date)) || ' and ' ||  
      quote_literal(date_trunc('hour', NEW.date) + '1 hour'::interval) || 
      '), PRIMARY KEY (i)) INHERITS (sip_capture);' ;
      EXECUTE 'INSERT INTO sip_capture_p' || to_char(NEW.date, 'YYYY_MM_DD_HH') 
      || ' SELECT ((' || quote_literal(NEW) || ')::sip_capture).*'; 
   END;
   RETURN NULL;
END;
$BODY$
LANGUAGE plpgsql;
